# GitHub Action for deploying Next.js with Supabase
name: Deploy Next.js with Supabase

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to the github-pages branch
permissions:
  contents: write # Changed from read to write to allow pushing to the branch

# Allow only one concurrent deployment
concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  # Build job
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: "18"
      
      # Create a temporary fix for the API routes
      - name: Fix API routes for static export
        run: |
          mkdir -p .github/temp-fixes
          echo "// This is a temporary fix for static export" > .github/temp-fixes/fix-api-routes.js
          echo "const fs = require('fs');" >> .github/temp-fixes/fix-api-routes.js
          echo "const path = require('path');" >> .github/temp-fixes/fix-api-routes.js
          echo "const apiDir = path.join(process.cwd(), 'app/api');" >> .github/temp-fixes/fix-api-routes.js
          echo "if (fs.existsSync(apiDir)) {" >> .github/temp-fixes/fix-api-routes.js
          echo "  const files = fs.readdirSync(apiDir, { recursive: true });" >> .github/temp-fixes/fix-api-routes.js
          echo "  files.forEach(file => {" >> .github/temp-fixes/fix-api-routes.js
          echo "    const filePath = path.join(apiDir, file);" >> .github/temp-fixes/fix-api-routes.js
          echo "    if (fs.statSync(filePath).isFile() && (filePath.endsWith('route.ts') || filePath.endsWith('route.js'))) {" >> .github/temp-fixes/fix-api-routes.js
          echo "      let content = fs.readFileSync(filePath, 'utf8');" >> .github/temp-fixes/fix-api-routes.js
          echo "      if (!content.includes('export const dynamic')) {" >> .github/temp-fixes/fix-api-routes.js
          echo "        content = \"export const dynamic = 'force-static';\\n\" + content;" >> .github/temp-fixes/fix-api-routes.js
          echo "        fs.writeFileSync(filePath, content);" >> .github/temp-fixes/fix-api-routes.js
          echo "        console.log('Added dynamic = force-static to', filePath);" >> .github/temp-fixes/fix-api-routes.js
          echo "      }" >> .github/temp-fixes/fix-api-routes.js
          echo "    }" >> .github/temp-fixes/fix-api-routes.js
          echo "  });" >> .github/temp-fixes/fix-api-routes.js
          echo "}" >> .github/temp-fixes/fix-api-routes.js
      
      - name: Install dependencies
        run: npm install --legacy-peer-deps
      
      # Run the API route fix script
      - name: Apply API route fixes
        run: node .github/temp-fixes/fix-api-routes.js
      
      - name: Build with Next.js
        env:
          # Supabase environment variables
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
          SUPABASE_JWT_SECRET: ${{ secrets.SUPABASE_JWT_SECRET }}
          # Database connection variables
          POSTGRES_URL: ${{ secrets.POSTGRES_URL }}
          POSTGRES_PRISMA_URL: ${{ secrets.POSTGRES_PRISMA_URL }}
          POSTGRES_URL_NON_POOLING: ${{ secrets.POSTGRES_URL_NON_POOLING }}
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DATABASE: ${{ secrets.POSTGRES_DATABASE }}
          POSTGRES_HOST: ${{ secrets.POSTGRES_HOST }}
          # Serverless API URL
          NEXT_PUBLIC_SERVERLESS_API_URL: ${{ secrets.NEXT_PUBLIC_SERVERLESS_API_URL }}
        run: npm run build
      
      # Create .nojekyll file to prevent GitHub Pages from using Jekyll
      - name: Create .nojekyll file
        run: touch out/.nojekyll
      
      # Ensure CNAME file is in the output directory
      - name: Ensure CNAME file exists
        run: |
          if [ -f "public/CNAME" ]; then
            cp public/CNAME out/
          else
            echo "bats.rip" > out/CNAME
          fi
      
      # Deploy to the github-pages branch
      - name: Deploy to github-pages branch
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          folder: out # The folder the action should deploy
          branch: github-pages # The branch the action should deploy to
          clean: true # Automatically remove deleted file
